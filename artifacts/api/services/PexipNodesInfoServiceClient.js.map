{"version":3,"file":"PexipNodesInfoServiceClient.js","sourceRoot":"","sources":["../../../api/services/PexipNodesInfoServiceClient.ts"],"names":[],"mappings":"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","sourcesContent":["import * as queryString from \"querystring\";\r\nimport restify = require('restify-clients');\r\nimport {PexipInfo} from \"../models/PexipInfo\";\r\n\r\n//Interface to \"parse\" the information service token\r\ninterface IToken {\r\n    \"expires_in\": number, //Number of secconds before this token expires\r\n    \"access_token\": string  //Actual token value\r\n};\r\n\r\n/**\r\n * Service token wrapper that helps on validating and accessing\r\n * the token value and timeout\r\n */\r\nclass InfServiceToken {\r\n    token: IToken\r\n    expireTime: number\r\n    constructor(jsonToken: IToken) {\r\n        this.token = jsonToken;\r\n        //Stores the time where the token will espire so we don't need to perform this operation on every call\r\n        this.expireTime = new Date().getTime() + (jsonToken.expires_in * 1000);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the token has not yet expire.\r\n     */\r\n    get isValid() {\r\n        let today = new Date();\r\n        return this.expireTime > today.getTime();\r\n    }\r\n\r\n    /**\r\n     * Returns current token value.\r\n     */\r\n    get value() {\r\n        return this.token.access_token;\r\n    }\r\n}\r\n\r\n/**\r\n * Used to get data from the information service\r\n */\r\nexport class PexipNodesInfoServiceClient {\r\n    private serviceURL: string;\r\n    private username: string;\r\n    private password: string;\r\n    private currentToken: InfServiceToken | undefined;\r\n    //private https : any | undefined;\r\n\r\n    /**\r\n     * Client constructor, should be called as few times as possible\r\n     * (eg: with a singleton)\r\n     * @param serviceURL Service address, without any entry point information\r\n     * @param usr User allowed to get the client_credentiasl token\r\n     * @param pwd User's password\r\n     */\r\n    constructor(serviceURL: string, usr: string, pwd: string) {\r\n        this.serviceURL = serviceURL;\r\n        this.username = usr;\r\n        this.password = pwd;\r\n        //this.https = https;\r\n    }\r\n\r\n    /**\r\n     * Returns a valid acces token from the cache (field).\r\n     * If the token is no longer valid it wil get a new one.\r\n     */\r\n    public getToken(): Promise<InfServiceToken> {\r\n        return new Promise<InfServiceToken>((resolve, reject) => {\r\n            // if current stored token is valid return it\r\n            if (this.currentToken != null && this.currentToken.isValid) {\r\n                console.log(\"Reusing the token. Expires in: \" + (this.currentToken.expireTime - (new Date()).getTime()) / 1000);\r\n                resolve(this.currentToken);\r\n                return;\r\n            }\r\n            //if current token is null or invalid we need to get a new one.\r\n\r\n            //Prepare service call\r\n            let client = restify.createJsonClient({\r\n                url: this.serviceURL,\r\n            });\r\n            //Set auth parameters\r\n            client.basicAuth(this.username, this.password);\r\n\r\n            //Call the rest service\r\n            //(note grant_type needs to be part og the query string, Tried placing it in headers and body and it didn't work.)\r\n            client.post('/oauth/token?grant_type=client_credentials',\r\n                (err: Object, _req: Object, _res: Object, obj: IToken) => {\r\n                    if (err) {\r\n                        //Any error will be returned as is.\r\n                        //TODO: Create an error message and logg the error here. We still need to reject it to prevent cascading the error\r\n                        reject(err);\r\n                    } else {\r\n                        //Use returned service token to create a local token object\r\n                        this.currentToken = new InfServiceToken(obj);\r\n                        console.log(JSON.stringify(obj, null, 2));\r\n                        console.log(\"New token expires in: \" + (this.currentToken.expireTime - (new Date()).getTime()) / 1000);\r\n                        resolve(this.currentToken);\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generic method to get objects out of the information service\r\n     * @param path full path for the request  URL+Entrypoint+Parameters\r\n     */\r\n    public getInfo(path: String, maxRetries: number): Promise<Object> {\r\n        //Before calling the service we need to get current token\r\n        return this.getToken()\r\n            .then(token => {\r\n                //Use current token to get the required information.\r\n                let acc_tok = \"Bearer \" + token.value;\r\n\r\n                //Prepare the service call\r\n                let client = restify.createJsonClient({\r\n                    url: this.serviceURL,\r\n                    headers: {\r\n                        authorization: acc_tok\r\n                    }\r\n                });\r\n\r\n                //Call the service and return the error or the requested object\r\n                return new Promise<Object>((resolve, reject) => {\r\n                    client.get(path,\r\n                        (err: Object, _req: Object, _res: Object, obj: Object) => {\r\n                            if (err) {\r\n                                //if an error is found it will retry to get it.\r\n                                if (maxRetries > 0) {\r\n                                    console.log(\"Error getting information. Retrying operation:  \"+ err)\r\n                                    this.getInfo(path, maxRetries - 1)\r\n                                    //just bubble up on error or success\r\n                                        .then(retVal => resolve(retVal))\r\n                                        .catch(retVal => reject(retVal));\r\n                                }\r\n                                else {\r\n                                    reject(err);\r\n                                }\r\n                            } else {\r\n                                resolve(obj);\r\n                            }\r\n                        });\r\n                });\r\n            })\r\n            .catch(reason => {\r\n                if (maxRetries > 0) {\r\n                    return this.getInfo(path, maxRetries - 1);\r\n                }\r\n                return reason;\r\n            });\r\n    }\r\n\r\n    public getInfoBasicAuth(path: String): Promise<Object> {\r\n        return new Promise<PexipInfo>((resolve, reject) => {\r\n            let client = restify.createJsonClient({\r\n                url: this.serviceURL + path,\r\n                rejectUnauthorized: false,\r\n                headers: {\r\n                    Accept: \"application/json\"\r\n                }\r\n            });\r\n            client.basicAuth(this.username, this.password);\r\n            client.get(\"\",\r\n                (err: Object, _req: Object, _res: Object, obj: PexipInfo) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(obj);\r\n                    }\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n\r\n}"]}