{"version":3,"file":"configurePexipNodes.js","sourceRoot":"","sources":["../../api/configurePexipNodes.ts"],"names":[],"mappings":"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","sourcesContent":["import * as util from \"util\";\nimport * as fs from \"fs\";\nimport * as Buffer from \"buffer\";\nimport * as child from \"child_process\";\nimport {isNullOrUndefined} from \"util\";\nimport * as lodash from \"lodash\";\nimport * as sleep from \"system-sleep\";\nimport * as newman from \"newman\";\nimport {PexipManagerService} from \"./services/PexipManagerService\";\nimport {Stack} from 'stack-typescript';\n\n\nconst INFRACONIG = require(\"./config/infraconfig.json\");\n\n\nfunction configurepexipNodes() {\n\n    let postmanenvjson = null;\n    let terraFormState = null;\n    let subnetworkState = null;\n    let arg = null;\n\n    /* pMgmSvc.findManagementVM().then(o => {\n         console.log(\"findManagementVM \" + JSON.stringify(o));\n         Object.keys(o).forEach(key => {\n             console.log(key);\n             console.log(o[key]);\n         });\n     }).catch(r => {\n         console.log(\"findManagementVM Error \" +  r);\n     });*/\n\n    process.argv.forEach(function (args) {\n        if (args.indexOf(\"postmanenvfile\") >= 1) {\n            postmanenvjson = arg.split(\"=\")[1];\n        }\n        if (args.indexOf(\"terraformenvfile\") >= 1) {\n            terraFormState = arg.split(\"=\")[1];\n        }\n        if (args.indexOf(\"subnetworkstateenvfile\") >= 1) {\n            subnetworkState = arg.split(\"=\")[1];\n        }\n    });\n\n    postmanenvjson = util.isNullOrUndefined(postmanenvjson) ? \"pexip-gcp-test.postman_environment.json\" : postmanenvjson;\n    terraFormState = util.isNullOrUndefined(terraFormState) ? \"terraform.tfstate\" : terraFormState;\n    subnetworkState = util.isNullOrUndefined(subnetworkState) ? \"subnetwork.tfstate\" : subnetworkState;\n\n    let fdPostmanEnvFile = fs.openSync(postmanenvjson, \"r\");\n    let nFileSize = 10 * 1 * 1024 * 1024;\n    let readBuffer = new Buffer.Buffer(nFileSize);\n    let nBytesRead = fs.readSync(fdPostmanEnvFile, readBuffer, 0, nFileSize, 0);\n    let postmanEnv = JSON.parse(readBuffer.toString('utf8', 0, nBytesRead));\n\n    let fdterraformEnvFile = fs.openSync(terraFormState, \"r\");\n    let nterraformFileSize = 10 * 1 * 1024 * 1024;\n    let readterraformBuffer = new Buffer.Buffer(nterraformFileSize);\n    let nterraformBytesRead = fs.readSync(fdterraformEnvFile, readterraformBuffer, 0, nterraformFileSize, 0);\n    let terraformEnv = JSON.parse(readterraformBuffer.toString('utf8', 0, nterraformBytesRead));\n\n    let fdsubnetworkStateEnvFile = fs.openSync(subnetworkState, \"r\");\n    let nsubnetworkStateFileSize = 10 * 1 * 1024 * 1024;\n    let readsubnetworkStateBuffer = new Buffer.Buffer(nsubnetworkStateFileSize);\n    let nsubnetworkStateBytesRead = fs.readSync(fdsubnetworkStateEnvFile, readsubnetworkStateBuffer, 0, nsubnetworkStateFileSize, 0);\n    let subnetworkStateEnv = JSON.parse(readsubnetworkStateBuffer.toString('utf8', 0, nsubnetworkStateBytesRead));\n\n\n    let pexipDomain = terraformEnv.modules[0].outputs[\"pexip_domain\"].value\n    let mgrPubIp = terraformEnv.modules[0].outputs[\"pexip_mgr_pubip\"].value\n    let mgrPrivateIp = terraformEnv.modules[0].outputs[\"pexip_mgr_privateip\"].value\n    let mgrUserName = terraformEnv.modules[0].outputs[\"pexip_mgr_username\"].value\n    let mgrPassword = terraformEnv.modules[0].outputs[\"pexip_mgr_password\"].value\n\n    postmanEnv.values.forEach(function (item) {\n        if (item.key == \"pexip_mgr_url\") {\n            item.value = \"https://\" + mgrPrivateIp;\n        }\n        if (item.key == \"pexip_mgr_username\") {\n            item.value = mgrUserName;\n        }\n        if (item.key == \"pexip_mgr_password\") {\n            item.value = mgrPassword;\n        }\n        if (item.key == \"pexip_domain\") {\n            item.value = pexipDomain;\n        }\n\n    });\n\n    var pMgmSvc = new PexipManagerService(\"https://\" + mgrPrivateIp + \"/\", \"admin\", \"XGb/9XTjyjzV0TZASDY3B5KmZ+XcBZmHvLmvI7xlsrg=\");\n\n    let nodeStack: String[] = []\n    pMgmSvc.findWorkerVM().then(o => {\n        // for each system location\n        INFRACONIG.forEach(function (system_location) {\n            let nodeConfiguredStack: String[] = []\n            console.info(system_location.system_location)\n            Object.keys(terraformEnv.modules[0].outputs).forEach((pexConfNodeKey) => { // pexConfNodeKey: deployment-prefix, pexip_conf_us-central1-a\n                //finding nodes in a zone\n                var zoneFromtfState = pexConfNodeKey.split(\"pexip_conf_\")\n                // if the zone found is same as from system_location zone ...then take that zone\n                var zone = lodash.filter(system_location.zones, x => x.name === zoneFromtfState[1])\n\n                if (zoneFromtfState.length > 1 && zone.length > 0) {\n                    //number of nodes in that zone\n                    let pexConfNodes = terraformEnv.modules[0].outputs[pexConfNodeKey].value; //access_config[0], [1]\n                    if (!isNullOrUndefined(pexConfNodes)) {\n                        var configItem = null;\n                        var zoneCount = Math.min(pexConfNodes.length, zone[0].count) //whichever is minimum: inventory or config count\n                        for (let i = 0; i < zoneCount; i++) {\n                            configItem = pexConfNodes[i];\n                            let pexipConfNodeAddress = configItem[0].address\n                            let pexipConfNodeStaticNatAddress = configItem[0].access_config[0].nat_ip\n                            let nodeAlreadyConfigured = false;\n\n                            Object.keys(o).forEach(key => {\n                                if (key == \"objects\") {\n                                    for (let entry of o[key]) {\n                                        if (entry.address == pexipConfNodeAddress) {\n                                            nodeAlreadyConfigured = true;\n                                            nodeConfiguredStack.push(pexipConfNodeAddress)\n                                            break;\n                                        }\n                                        nodeStack.push(entry.name)\n\n                                    }\n                                }\n                            })\n                            if (nodeConfiguredStack.length > 0  ) {\n                                var nodeexist =  lodash.filter(nodeConfiguredStack,  x => x === pexipConfNodeAddress)\n                                if (nodeexist.length > 0) {\n                                    nodeAlreadyConfigured = true;\n                                }\n                            }\n                            if (nodeAlreadyConfigured && zoneCount < pexConfNodes.length) {\n                                zoneCount++;\n                            }\n\n                            if (nodeAlreadyConfigured == false) {\n                                let nodeType = zone[0].type\n                                var index = 0;\n                                var latestPexipName;\n                                nodeConfiguredStack.push(pexipConfNodeAddress)\n\n                                postmanEnv.values.forEach(function (item) {\n                                    if (item.key == \"pexip_location_name\") {\n                                        if (!isNullOrUndefined(system_location.system_location)) {\n                                            item.value = system_location.system_location\n                                        }\n                                    }\n\n                                    if (item.key == \"pexip_confnode_hostname\") {\n                                        //configuration name ..in zone NA ...pexconf_101, 100 zone, 200 zone\n                                        // item.value = terraformEnv.modules[0].outputs[\"pexip_confnode_\" + (i + 1) + \"_hostname\"].value;\n                                        if (zone[0].name.indexOf(\"us-central1\") >= 0) {\n                                            let lastItem = nodeStack[nodeStack.length - 1];\n                                            if (!isNullOrUndefined(lastItem)) {\n                                                let serial = lastItem.split(\"pexip\")[1]\n                                                let serialNumber = Number(serial) + 1\n                                                latestPexipName = \"pexip\" + serialNumber\n                                                nodeStack.push(latestPexipName)\n                                            }\n                                            else {\n                                                latestPexipName = \"pexip102\"\n                                                nodeStack.push(\"pexip102\")\n                                            }\n                                        }\n                                        item.value = latestPexipName\n                                    }\n                                    if (item.key == \"pexip_confnode_name\") {\n                                        //item.value = terraformEnv.modules[0].outputs[\"pexip_confnode_\" + (i + 1) + \"_name\"].value;\n                                        if (!isNullOrUndefined(latestPexipName)) {\n                                            item.value = latestPexipName\n                                        }\n                                    }\n                                    if (item.key == \"pexip_node_type\") {\n                                        // item.value = terraformEnv.modules[0].outputs[\"pexip_confnode_\" + (i + 1) + \"_type\"].value;\n                                        // item.value = zone[0].node_type\n                                        item.value = nodeType\n                                    }\n                                    if (item.key == \"pexip_confnode_address\") {\n                                        item.value = pexipConfNodeAddress;\n                                    }\n                                    if (item.key == \"pexip_confnode_gateway\") {\n                                        item.value = subnetworkStateEnv.modules[0].resources[\"google_compute_subnetwork.default\"].primary.attributes.gateway_address\n                                        // item.value = terraformEnv.modules[0].outputs[\"pexip_na_gateway\"].value;\n                                    }\n                                    if (item.key == \"pexip_confnode_netmask\") {\n                                        item.value = \"255.255.255.255\"\n                                    }\n                                    if (item.key == \"pexip_confnode_static_nat_address\") {\n                                        item.value = pexipConfNodeStaticNatAddress\n                                    }\n                                });\n\n                                fs.writeFileSync(postmanenvjson, JSON.stringify(postmanEnv));\n                                sleep(20 * 1000);\n\n                                newman.run({\n                                    collection: './pexip-gcp-config-node.postman_collection.json',\n                                    reporters: ['cli'],\n                                    insecure: true,\n                                    environment: './pexip-gcp-test.postman_environment.json'\n                                }, function (err, summary) {\n                                    if (err || summary.error) {\n                                        console.info('collection run error out - ' + summary.error);\n                                        throw err;\n                                    }\n                                    console.info('collection run complete! iteration - ' + summary.collection);\n                                }).on('request', function (err, summary) {\n                                    if (err || summary.error) {\n                                        console.info('collection run error! request - ' + summary.error);\n                                        throw err;\n                                    }\n                                    console.info('collection run complete! request - ' + summary.response.code);\n                                }).on('assertion', function (err, summary) {\n                                    if (err || summary.error) {\n                                        console.info('collection run error! assertion - ' + summary.error.name + \" \" + summary.error.message);\n                                        // process.abort()\n                                        // throw err\n                                        throw new Error(summary.error.name + \" \" + summary.error.message);\n                                    }\n                                    console.info('collection run complete! assertion - ' + summary.collection);\n                                }).on('done', function (err, summary) {\n                                    if (err || summary.error) {\n                                        console.info('collection run error! done - ' + summary.error);\n                                        throw err;\n                                    }\n                                    console.info('collection run complete! done - ' + summary.collection);\n                                });\n\n                                sleep(30 * 1000);\n                            }\n                            else {\n                                console.info('Conf Node already configured ' + pexipConfNodeAddress + \" \" + pexipConfNodeStaticNatAddress);\n                            }\n                        }\n                    }\n                }\n            })\n        })\n    }).catch( error => {\n        console.error(error)\n        process.abort()\n    })\n\n\n}\n\nconfigurepexipNodes();\n//XGb/9XTjyjzV0TZASDY3B5KmZ+XcBZmHvLmvI7xlsrg="]}