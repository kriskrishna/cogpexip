{"version":3,"file":"addPexipSSLCert.js","sourceRoot":"","sources":["../../api/addPexipSSLCert.ts"],"names":[],"mappings":"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","sourcesContent":["import * as util from \"util\";\nimport * as fs from \"fs\";\nimport * as Buffer from \"buffer\";\nimport * as child from \"child_process\";\nimport {isNullOrUndefined} from \"util\";\nimport * as lodash from \"lodash\";\nimport * as sleep from \"system-sleep\";\nimport * as newman from \"newman\";\nimport {Request, Response} from \"restify\";\nimport {PexipManagerService} from \"./services/PexipManagerService\";\n\nfunction addPexipSSLCert() {\n\n    let postmanenvjson = null;\n    let terraFormState = null;\n    let arg = null;\n\n    process.argv.forEach(function (args) {\n        if (args.indexOf(\"postmanenvfile\") >= 1) {\n            postmanenvjson = arg.split(\"=\")[1];\n        }\n        if (args.indexOf(\"terraformenvfile\") >= 1) {\n            terraFormState = arg.split(\"=\")[1];\n        }\n    });\n\n    postmanenvjson = util.isNullOrUndefined(postmanenvjson) ? \"pexip-gcp-test.postman_environment.json\" : postmanenvjson;\n    terraFormState = util.isNullOrUndefined(terraFormState) ? \"terraform.tfstate\" : terraFormState;\n\n    let fdPostmanEnvFile = fs.openSync(postmanenvjson, \"r\");\n    let nFileSize = 10 * 1 * 1024 * 1024;\n    let readBuffer = new Buffer.Buffer(nFileSize);\n    let nBytesRead = fs.readSync(fdPostmanEnvFile, readBuffer, 0, nFileSize, 0);\n    let postmanEnv = JSON.parse(readBuffer.toString('utf8', 0, nBytesRead));\n\n    let fdterraformEnvFile = fs.openSync(terraFormState, \"r\");\n    let nterraformFileSize = 10 * 1 * 1024 * 1024;\n    let readterraformBuffer = new Buffer.Buffer(nterraformFileSize);\n    let nterraformBytesRead = fs.readSync(fdterraformEnvFile, readterraformBuffer, 0, nterraformFileSize, 0);\n    let terraformEnv = JSON.parse(readterraformBuffer.toString('utf8', 0, nterraformBytesRead));\n\n    /*\n     has to be passed in using credhub\n     postmanEnv.values.forEach(function (item) {\n         if (item.key == \"entitlement_id\") {\n\n         }\n     });\n     */\n\n    let pexipDomain = terraformEnv.modules[0].outputs[\"pexip_domain\"].value\n    let mgrPubIp = terraformEnv.modules[0].outputs[\"pexip_mgr_pubip\"].value\n    let mgrPrivateIp = terraformEnv.modules[0].outputs[\"pexip_mgr_privateip\"].value\n    let mgrUserName = terraformEnv.modules[0].outputs[\"pexip_mgr_username\"].value\n    let mgrPassword = terraformEnv.modules[0].outputs[\"pexip_mgr_password\"].value\n\n    var pMgmSvc = new PexipManagerService(\"https://\" + mgrPrivateIp +\"/\", \"admin\", \"XGb/9XTjyjzV0TZASDY3B5KmZ+XcBZmHvLmvI7xlsrg=\");\n\n    postmanEnv.values.forEach(function (item) {\n        if (item.key == \"pexip_mgr_url\") {\n            item.value = \"https://\" + mgrPrivateIp;\n        }\n        if (item.key == \"pexip_mgr_username\") {\n            item.value = mgrUserName;\n        }\n        if (item.key == \"pexip_mgr_password\") {\n            item.value = mgrPassword;\n        }\n        if (item.key == \"pexip_domain\") {\n            item.value = pexipDomain;\n        }\n    })\n\n    fs.writeFileSync(postmanenvjson, JSON.stringify(postmanEnv));\n\n    newman.run({\n        collection: './pexip-gcp-cert.postman_collection.json',\n        reporters: ['cli'],\n        insecure: true,\n        environment: './pexip-gcp-test.postman_environment.json',\n        bail: true\n    }, function (err, summary) {\n        if (err || summary.error) {\n            console.info('TLS Cert Upload collection run error out!' + summary.error);\n            throw err;\n        }\n        console.info('TLS Cert Upload collection run complete!' + summary.collection);\n    }).on('request', function (err, summary) {\n        if (err || summary.error) {\n            console.info('TLS Cert Upload collection run error!' + summary.error);\n            throw err;\n        }\n        console.info('TLS Cert Upload collection run complete! reponse code: ' + summary.response.code);\n        console.info('TLS Cert Upload collection run complete! reponse body ' + summary.response.text());\n    }).on('assertion', function (err, summary) {\n        if (err || summary.error) {\n            console.info('TLS Cert Upload collection run error! ' + summary.error.name + \" \" + summary.error.message);\n            throw new Error(summary.error.name + \" \" + summary.error.message);\n        }\n        console.info('TLS Cert Upload collection run complete!' + summary.collection);\n    }).on('done', function (err, summary) {\n        if (err || summary.error) {\n            console.info('TLS Cert Upload collection run error! ' + summary.error);\n            throw err;\n        }\n        else {\n            pMgmSvc.findTLSCerts().then(o => {\n                Object.keys(o).forEach(key => {\n                    if (key == \"objects\") {\n                        for (let entry of o[key]) {\n                            postmanEnv.values.forEach(function (item) {\n                                if (item.key == \"pexip_tls_url\") {\n                                    item.value = entry.resource_uri;\n                                }\n                            })\n                            pMgmSvc.findWorkerVM().then(o => {\n                                Object.keys(o).forEach(key => {\n                                    if (key == \"objects\") {\n                                        for (let entry of o[key]) {\n                                            postmanEnv.values.forEach(function (item) {\n                                                if (item.key == \"pexip_current_node\") {\n                                                    console.log(\"replacing current node \" + entry.id);\n                                                    item.value = entry.id;\n                                                }\n                                            })\n                                            fs.writeFileSync(postmanenvjson, JSON.stringify(postmanEnv));\n\n                                            newman.run({\n                                                collection: './pexip-gcp-node-cert.postman_collection.json',\n                                                reporters: ['cli'],\n                                                insecure: true,\n                                                environment: './pexip-gcp-test.postman_environment.json'\n                                            }, function (err, summary) {\n                                                if (err || summary.error) {\n                                                    console.info('collection run error ' + summary.error);\n                                                    throw err;\n                                                }\n                                                console.info('collection run complete! ' + summary.collection);\n                                            }).on('request', function (err, summary) {\n                                                if (err || summary.error) {\n                                                    console.info('collection run error! ' + summary.error);\n                                                    throw err;\n                                                }\n                                                console.info('collection run complete! ' + summary.response.code);\n                                            }).on('assertion', function (err, summary) {\n                                                if (err || summary.error) {\n                                                    console.info('collection run error! ' + summary.error.name + \" \" + summary.error.message);\n                                                    throw new Error(summary.error.name + \" \" + summary.error.message);\n                                                }\n                                                console.info('collection run complete! ' + summary.collection);\n                                            }).on('done', function (err, summary) {\n                                                if (err || summary.error) {\n                                                    console.info('collection run error! ' + summary.error);\n                                                    throw err;\n                                                }\n                                                console.info('collection run complete! ' + summary.collection);\n                                            });// 1, \"string\", false\n\n                                            sleep(20 * 1000);\n                                        }\n                                    }\n                                });\n                            }).catch(r => {\n                                console.log(\"findWorkerVM Error \" + r);\n                            });\n                        }\n                    }\n                });\n            }).catch(r => {\n                    console.error(r)\n                    process.abort()\n            });\n        }\n        console.info('cert upload and assign cert to nodes: collection run complete! done - ' + summary.collection);\n    });\n}\n\naddPexipSSLCert();"]}